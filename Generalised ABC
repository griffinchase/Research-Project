import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

def sdot(s, t, rzero, Ti):
    S, I, R = s
    dS = -(I / Ti) * rzero * S
    dI = (I / Ti) * ((rzero * S) - 1)
    dR = I / Ti
    return [dS, dI, dR]

def simulate_sir(t_obs, s0, rzero, Ti):
    return odeint(sdot, s0, t_obs, args=(rzero, Ti))

# General ABC Rejection
def abc_rejection(data, num_samples, threshold, model_func, prior_func, s0, t_obs):
    accepted_samples = []
    for _ in range(num_samples):
        params_prior = prior_func()
        simulated_data = model_func(t_obs, s0, *params_prior)
        distance = np.linalg.norm(data - simulated_data)
        if distance < threshold:
            accepted_samples.append(params_prior)
    return np.array(accepted_samples)

def sir_prior_sample():
    rzero_prior = np.random.uniform(14.5, 15.5)
    Ti_prior = np.random.uniform(7.5, 8.5)
    return rzero_prior, Ti_prior

# Initial conditions and parameters
S0, I0, R0 = 0.9999, 0.0001, 0
s0 = [S0, I0, R0]
t_max = 30
t_obs = np.linspace(0, t_max, 1000)
data_observed = simulate_sir(t_obs, s0, 15.0, 8.0)

# ABC Rejection with SIR 
accepted_params = abc_rejection(data_observed, num_samples=10000, threshold=0.1, model_func=simulate_sir, prior_func=sir_prior_sample, s0=s0, t_obs=t_obs)

# Plotting accepted parameters histograms
fig, ax = plt.subplots(1, 2, figsize=(12, 5))
num_bins = 50

ax[0].hist(accepted_params[:, 0], bins=num_bins, color='blue', edgecolor='black')
ax[0].set_title('Histogram of Accepted rzero Values')
ax[0].set_xlabel('rzero')
ax[0].set_ylabel('Frequency')

ax[1].hist(accepted_params[:, 1], bins=num_bins, color='red', edgecolor='black')
ax[1].set_title('Histogram of Accepted Ti Values')
ax[1].set_xlabel('Ti')
ax[1].set_ylabel('Frequency')

plt.tight_layout()
plt.show()
s_obs = simulate_sir(rzero, Ti, s0, t_obs)
plot_sir(t_obs, s_obs[:, 0], s_obs[:, 1], s_obs[:, 2])

